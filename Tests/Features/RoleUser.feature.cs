// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowBddFramework.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RoleUserFeature : object, Xunit.IClassFixture<RoleUserFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RoleUser.feature"
#line hidden
        
        public RoleUserFeature(RoleUserFeature.FixtureData fixtureData, WorkflowBddFramework_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests/Features", "RoleUser", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create, Get,  Delete  Role User record")]
        [Xunit.TraitAttribute("FeatureTitle", "RoleUser")]
        [Xunit.TraitAttribute("Description", "Create, Get,  Delete  Role User record")]
        [Xunit.InlineDataAttribute("20", "b43e1439-62a4-42e2-80f7-58917d6b280c", "autotest", "ybuiko@mobilehealth.com", "V1.0", "200", new string[0])]
        [Xunit.InlineDataAttribute("18", "b43e1439-62a4-42e2-80f7-58917d6b280c", "autotest", "ybuiko@mobilehealth.com", "V1.0", "200", new string[0])]
        public void CreateGetDeleteRoleUserRecord(string workflowRoleId, string id, string userName, string email, string version, string statusCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("WorkflowRoleId", workflowRoleId);
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("UserName", userName);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Version", version);
            argumentsOfScenario.Add("StatusCode", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create, Get,  Delete  Role User record", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "WorkflowRoleId",
                            "Id",
                            "Email"});
                table1.AddRow(new string[] {
                            string.Format("{0}", workflowRoleId),
                            string.Format("{0}", id),
                            string.Format("{0}", email)});
#line 6
  testRunner.When(string.Format("I send RoleUser \"POST\" request for \"{0}\" with payload parameters", version), ((string)(null)), table1, "When ");
#line hidden
#line 9
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
  testRunner.And("I validate response has id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
  testRunner.When(string.Format("I input \"{0}\" in Query parameters and send \"GET\" all RoleUser request for \"{1}\"", workflowRoleId, version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
  testRunner.When(string.Format("I input RoleUserId as path parameter and \"{0}\" in Query parameters and send \"DELE" +
                            "TE\" request for \"{1}\"", workflowRoleId, version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RoleUserFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RoleUserFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
