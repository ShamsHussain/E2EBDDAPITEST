// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WorkflowBddFramework.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WorkflowFeature : object, Xunit.IClassFixture<WorkflowFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Workflow.feature"
#line hidden
        
        public WorkflowFeature(WorkflowFeature.FixtureData fixtureData, WorkflowBddFramework_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests/Features", "Workflow", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get All Workflow Types")]
        [Xunit.TraitAttribute("FeatureTitle", "Workflow")]
        [Xunit.TraitAttribute("Description", "Get All Workflow Types")]
        [Xunit.InlineDataAttribute("V1.0", "200", "10", new string[0])]
        [Xunit.InlineDataAttribute("V1.0", "200", "14", new string[0])]
        public void GetAllWorkflowTypes(string version, string statusCode, string expected, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Version", version);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Expected", expected);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Workflow Types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  testRunner.When(string.Format("I send \"GET\" all Workflow types request for \"{0}\"", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 5
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 6
  testRunner.And(string.Format("I validate response body has {0} result", expected), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get All Workflows")]
        [Xunit.TraitAttribute("FeatureTitle", "Workflow")]
        [Xunit.TraitAttribute("Description", "Get All Workflows")]
        [Xunit.InlineDataAttribute("10", "", "", "", "", "", "V1.0", "200", "10", new string[0])]
        [Xunit.InlineDataAttribute("10", "", "", "", "", "", "V1.0", "200", "14", new string[0])]
        public void GetAllWorkflows(string workflowTypeIds, string searchText, string pageSize, string page, string sortColumn, string sortAscending, string version, string statusCode, string expected, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("WorkflowTypeIds", workflowTypeIds);
            argumentsOfScenario.Add("SearchText", searchText);
            argumentsOfScenario.Add("PageSize", pageSize);
            argumentsOfScenario.Add("Page", page);
            argumentsOfScenario.Add("SortColumn", sortColumn);
            argumentsOfScenario.Add("SortAscending", sortAscending);
            argumentsOfScenario.Add("Version", version);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Expected", expected);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Workflows", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "WorkflowRoleId",
                            "SearchText",
                            "PageSize",
                            "Page",
                            "SortColumn",
                            "SortAscending"});
                table2.AddRow(new string[] {
                            "<WorkflowRoleId>",
                            string.Format("{0}", searchText),
                            string.Format("{0}", pageSize),
                            string.Format("{0}", page),
                            string.Format("{0}", sortColumn),
                            string.Format("{0}", sortAscending)});
#line 17
  testRunner.When(string.Format("I send \"GET\" all workflows request for \"{0}\" with query parameters", version), ((string)(null)), table2, "When ");
#line hidden
#line 20
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Submit coding for procedures in the order and the order after")]
        [Xunit.TraitAttribute("FeatureTitle", "Workflow")]
        [Xunit.TraitAttribute("Description", "Submit coding for procedures in the order and the order after")]
        [Xunit.InlineDataAttribute("14", "10", "20", "1", "startTime", "false", "Yellow", "", "V1.0", "200", new string[0])]
        public void SubmitCodingForProceduresInTheOrderAndTheOrderAfter(string workflowTypeIds, string orderWorkflowTypeIds, string pageSize, string page, string sortColumn, string sortAscending, string result, string remarks, string version, string statusCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("WorkflowTypeIds", workflowTypeIds);
            argumentsOfScenario.Add("OrderWorkflowTypeIds", orderWorkflowTypeIds);
            argumentsOfScenario.Add("PageSize", pageSize);
            argumentsOfScenario.Add("Page", page);
            argumentsOfScenario.Add("SortColumn", sortColumn);
            argumentsOfScenario.Add("SortAscending", sortAscending);
            argumentsOfScenario.Add("Result", result);
            argumentsOfScenario.Add("Remarks", remarks);
            argumentsOfScenario.Add("Version", version);
            argumentsOfScenario.Add("StatusCode", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit coding for procedures in the order and the order after", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "WorkflowTypeIds",
                            "PageSize",
                            "Page",
                            "SortColumn",
                            "SortAscending"});
                table3.AddRow(new string[] {
                            string.Format("{0}", workflowTypeIds),
                            "20",
                            "1",
                            "startTime",
                            "false"});
#line 29
  testRunner.When(string.Format("I send \"GET\" all workflows request for \"{0}\" with query parameters", version), ((string)(null)), table3, "When ");
#line hidden
#line 32
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
  testRunner.And("I get all workflows for one order that have \"Initial\" stage and save ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
  testRunner.When(string.Format("I send \"GET\" workflow by Id request for \"{0}\" with Id as path parameter", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
  testRunner.And("I get all actions, staged data, workflowName, currentStage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
  testRunner.When(string.Format("I send workflow \"POST\" request with action name Take Ownership for \"{0}\" with pay" +
                            "load parameters", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
  testRunner.When(string.Format("I send \"GET\" workflow by Id request for \"{0}\" with Id as path parameter", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
  testRunner.And("I get all actions, staged data, workflowName, currentStage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
  testRunner.When(string.Format("I send workflow \"POST\" request with action name \"Submit\"  \"{0}\"  for \"{1}\" with p" +
                            "ayload parameters", result, version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
  testRunner.Then(string.Format("I validate request {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WorkflowFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WorkflowFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
